{"version":3,"sources":["node_modules/browser-pack/_prelude.js","charting.js","scripts.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Object","defineProperty","value","default","htmlTagId","x_labels","y_data","chart_title","list_of_months","filtered_x_data","minMonthsGap","monthsArray","currentGapCount","lastMatchLocation","removeMonthsTooCloseToEachOther","map","x","_","Date","_month","getUTCMonth","_key","getFullYear","ctx","document","getElementById","getContext","Chart","type","data","labels","datasets","label","backgroundColor","borderColor","pointRadius","borderWidth","fill","options","tooltips","mode","titleFontFamily","bodyFontFamily","intersect","callbacks","title","tooltipItem","index","legend","fontColor","fontFamily","responsive","scales","yAxes","ticks","beginAtZero","display","gridLines","color","xAxes","autoSkip","minRotation","maxRotation","charting_js_1","console","log","endpoint","reportDateArray","testsCompleted","confirmedPositiveCovidPercentageOfTest","covidInHospital","confirmedPositiveDoubling","confirmedDeathsDoubling","querySelector","getLastEntries","thisArray","slice","Math","max","window","encodeURI","fetch","then","res","json","entry","_testCompleted","confirmedPositive","hospitalCovid","_confirmedPositiveDoubling","_confirmedDeathsDoubling","oneDaysPercentagePositiveResults","Number","toFixed","push"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction CovidChart(htmlTagId, x_labels, y_data, chart_title) {\n    var filtered_x_data = getFirstOfTheMonthEntriesWhileNullingOutOtherDates(x_labels);\n    filtered_x_data = removeMonthsTooCloseToEachOther(25, filtered_x_data);\n    var ctx = document.getElementById(htmlTagId).getContext('2d');\n    var myChart = new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: filtered_x_data,\n            datasets: [{\n                    label: chart_title,\n                    data: y_data,\n                    backgroundColor: '#778DA9',\n                    borderColor: '#778DA9',\n                    pointRadius: 1,\n                    borderWidth: 1,\n                    fill: false\n                }]\n        },\n        options: {\n            tooltips: {\n                mode: 'index',\n                titleFontFamily: 'Roboto',\n                bodyFontFamily: 'Roboto',\n                intersect: true,\n                callbacks: {\n                    title: function (tooltipItem) {\n                        return \"Date: \" + x_labels[tooltipItem[0].index];\n                        // console.log(tooltipItem);\n                        // console.log();\n                        //   return data['labels'][tooltipItem[0]['index']];\n                    }\n                }\n            },\n            legend: {\n                labels: {\n                    // This more specific font property overrides the global property\n                    fontColor: '#D85D4C',\n                    fontFamily: 'Roboto'\n                }\n            },\n            responsive: true,\n            scales: {\n                yAxes: [{\n                        ticks: {\n                            beginAtZero: true,\n                            display: true,\n                            fontFamily: 'Roboto',\n                        },\n                        gridLines: {\n                            color: \"rgba(0, 0, 0, 0)\",\n                        },\n                        color: \"#FFFFFF\"\n                    }],\n                xAxes: [{\n                        ticks: {\n                            autoSkip: false,\n                            fontColor: \"#FFFFFF\",\n                            minRotation: 0,\n                            maxRotation: 0,\n                            fontFamily: 'Roboto',\n                        },\n                        gridLines: {\n                            color: \"rgba(0, 0, 0, 0)\",\n                        }\n                    }]\n            }\n        }\n    });\n}\nexports.default = CovidChart;\nfunction getFirstOfTheMonthEntriesWhileNullingOutOtherDates(datesList) {\n    var list_of_months = {};\n    var filtered_x_data = datesList.map(function (x) {\n        var _ = new Date(x + \"T00:00:00.000-05:00\");\n        var month_prefix = _.getUTCMonth() < 9 ? '0' : '';\n        var _month = month_prefix + (_.getUTCMonth() + 1);\n        var _year = _.getFullYear();\n        var _key = _year + \"-\" + _month;\n        if (list_of_months[_key]) {\n            return \"\";\n        }\n        list_of_months[_key] = true;\n        return _key;\n    });\n    return filtered_x_data;\n}\nfunction removeMonthsTooCloseToEachOther(minMonthsGap, monthsArray) {\n    var currentGapCount = null;\n    var lastMatchLocation = null;\n    for (var i = 0; i < monthsArray.length; i++) {\n        if (monthsArray[i]) {\n            if (i === 0) {\n                lastMatchLocation = 0;\n                currentGapCount = 0;\n                continue;\n            }\n            if (currentGapCount < minMonthsGap) {\n                monthsArray[lastMatchLocation] = \"\";\n            }\n            lastMatchLocation = i;\n            currentGapCount = 0;\n        }\n        else {\n            currentGapCount += 1;\n        }\n    }\n    return monthsArray;\n}\n","import CovidChart from './charting.js'\nconsole.log(\"WTF AMI EXIST FOR REALL?????\");\n\nfunction fetchCovidData() {\n\n    const endpoint: string = window.encodeURI(`http://192.168.1.51:3000/covid/`);\n\n    return fetch(endpoint)\n        .then(res =>\n            res.json()\n        )\n        .then((data) => {\n            if (!data[0]) {\n\n                console.log(\"WTF NOTHONG THERE IDIOT!!!\")\n            }\n            console.log(\"okay returning some data i think\")\n            return data\n        }\n\n        )\n}\n\nconst mainSection : Element = document.querySelector('.coral');\n\n\nfunction displayCovidData() : void {\n    let reportDateArray : Array<string> = []\n    let testsCompleted : Array<number> = []\n    let confirmedPositiveCovidPercentageOfTest : Array<number> = []\n    let covidInHospital : Array<bigint> = [];\n    let confirmedPositiveDoubling : Array<bigint> = [];\n    let confirmedDeathsDoubling : Array<bigint> = [];\n\n    // function renderData(data) {\n    //     return `<h1> ${data[0][\"Reported Date\"]} </h1>`;\n    // }\n\n    fetchCovidData().then((data) => {\n        console.log(data);\n\n        data.map((entry : any) => {\n            const _testCompleted : number | null = entry[\"Total tests completed in the last day\"];\n            const confirmedPositive : number | null = entry[\"Confirmed Positive\"];\n            const hospitalCovid : bigint | null = entry[\"Number of patients hospitalized with COVID-19\"];\n            const _confirmedPositiveDoubling : bigint | null = entry[\"Number of Days for Cumulative Confirmed Positive to Double\"];\n            const _confirmedDeathsDoubling : bigint | null = entry[\"Number of Days for Deaths to Double\"];\n\n\n            const oneDaysPercentagePositiveResults : any = _testCompleted === 0 || _testCompleted == null ? null : roundThis((confirmedPositive / _testCompleted) * 100);\n            confirmedPositiveCovidPercentageOfTest.push(oneDaysPercentagePositiveResults);\n            testsCompleted.push(_testCompleted / 1000);\n            covidInHospital.push(hospitalCovid);\n            reportDateArray.push(entry[\"Reported Date\"]);\n            confirmedPositiveDoubling.push(_confirmedPositiveDoubling);\n            confirmedDeathsDoubling.push(_confirmedDeathsDoubling);\n\n        });\n        const last_x_days = 55;\n        reportDateArray = getLastEntries(reportDateArray, last_x_days);\n        testsCompleted = getLastEntries(testsCompleted, last_x_days);\n        confirmedPositiveCovidPercentageOfTest = getLastEntries(confirmedPositiveCovidPercentageOfTest, last_x_days);\n        covidInHospital = getLastEntries(covidInHospital, last_x_days);\n        confirmedPositiveDoubling = getLastEntries(confirmedPositiveDoubling, last_x_days);\n        confirmedDeathsDoubling = getLastEntries(confirmedDeathsDoubling, last_x_days);\n\n\n        CovidChart(\"chart\", reportDateArray, testsCompleted, \"# of Tests Completed (in '000's)\");\n        CovidChart(\"chart2\", reportDateArray, confirmedPositiveCovidPercentageOfTest, \"Positive Covid Test Results (in %'s)\");\n\n        CovidChart(\"chart3\", reportDateArray, covidInHospital, \"# of Patients in Hospital\");\n        CovidChart(\"chart4\", reportDateArray, confirmedPositiveDoubling, \"# of Days for Positive Cases To Double\"); \n        CovidChart(\"chart5\", reportDateArray, confirmedPositiveDoubling, \"# of Days for Deaths To Double\"); \n\n        // const html = renderData(data);\n        // mainSection.insertAdjacentHTML('beforeend', html);\n\n    }\n    );\n}\n\nfunction getLastEntries(thisArray : Array<any>, x : number) : Array<any> {\n    console.log(\"mother father\");\n    return thisArray.slice(Math.max(thisArray.length - x, 0));\n}\n\n\nfunction roundThis(int : number) : number {\n    return Number((int).toFixed(2));\n}\n\ndisplayCovidData();"]}